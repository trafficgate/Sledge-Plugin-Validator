NAME
    Sledge::Plugin::Validator - FORM から入力されたパラメータチェック。

SYNOPSIS
      package Project::Pages::Foo;
      use Sledge::Plugin::Validator;

      sub dispatch_foo1 {
          #
          # 入力フォームの表示
          # action="foo2.cgi"
          #
      }

      sub valid_foo2 {

          # エラー時のテンプレートの定義
          $self->valid->err_template('foo1');

          # foo1 のテンプレートの入力チェック
          $self->valid->check(
              login_id  => [qw(INT)],
              name      => [qw(NOT_NULL)],
              kana      => [qw(NOT_NULL KATAKANA)],
              email1    => [qw(NOT_NULL EMAIL),['DUPLICATION', 'email2']],
              email2    => [qw(NOT_NULL EMAIL),['DUPLICATION', 'email1']],
              sex       => [qw(NOT_NULL)],
              type      => [qw(NOT_NULL)],
              age       => [qw(INT), ['LENGTH',1,2]],
              zip1      => [qw(INT), ['LENGTH',3]],
              zip2      => [qw(INT), ['LENGTH',4]],
              tel       => [qw(TEL)],
              fax       => [qw(TEL)],
          );

          # 特定の項目だけチェックを追加したい
          if ($self->r->param('type') eq 'B') {
              $self->valid->check(
                  company_name   => [qw(NOT_NULL)],
                  company_kana   => [qw(NOT_NULL KATAKANA)],
              );
          }

          # login_id について特殊なチェック(DBを見るとか)
          if ( ..... エラーだったら真になるようなif文など ..... ) {
              $self->valid->set_error('DB', 'login_id');
          }

          # zip1 と zip2 は zip というエラーコードでも判定できるようにする。
          $self->valid->set_alias(
              zip  => [qw(zip1 zip2)]
          );

          # 自作の入力エラー関数を設定
          $self->valid->set_function(
              A_OR_B => sub {return ($_[0] =~ /^[AB]$/)? 1 : 0;}
          );

          # 自作の入力エラー関数群をロード(1)
          #
          # ex. Project/Validator/foo.pm を読み込む
          # 自作関数の作り方は Sledge::Plugin::Validator::default を参考のこと
          $self->valid->load_function("Project::Validator::foo");
          $self->valid->check(
              foo  => [qw(FOO)],
              bar  => [qw(BAR)],
          );

          # 自作の入力エラー関数群をロード(2)
          # Sledge::Plugin::Validator::bar を自動的に読み込みます。
          $self->valid->check(
              bar  => [qw(BAR)],
          );
      }

      #
      # テンプレートでは以下のようにエラーの項目によって適宜メッセージを
      # 生成してください。
      #
      [% IF is.error %]
      入力エラーです。
      <ul>
          [% IF valid.is_error('login_id') %]
              <li>ログインIDを再度入力してください。</li>
          [% END %]
          [% IF valid.is_error('login_id', 'INT') %]
              <li>ログインIDは数字で入力してください。</li>
          [% END %]
          [% IF valid.is_error('login_id', 'DB') %]
              <li>ログインIDは使用できません。</li>
          [% END %]
          :
          :
      </ul>
      [% END %]

DESCRIPTION
    Sledge::Plugin::Validator FORM から入力されたパラメータチェックする
    プラグインです。

    Sledge::Plugin::Regularなど文字列の正規化を行っている場合は valid_page
    が起動されるタイミング(BEFORE_DISPATCH)に注意してください。

    入力エラーが起きると post_dispatch, diapatch は実行されずに、設定
    しているエラー用のテンプレートを出力します。

    未入力は明示的に NOT_xxx を設定していないと 入力チェックが通ります。

CHECK FUNCTION
    check メソッドで定義できるチェックの種類については、
    Sledge::Plugin::Validator::* をごらんになってください。

    LENGTH, DATE など引数を必要とするチェックは配列のリファレンス
    として渡します。

    引数は始めに $self->r->param()
    に存在するかどうかをチェックし、値がある場合は その値に変換されます。

METHOD
    いずれも、Sledgeオブジェクトとしてではなく、valid
    オブジェクトから使用します。

    new オブジェクトを作成します。 BEFORE_DISPATCH
        のタイミングで自動的に実行されます。
        普段は気にする必要はありません。

    err_template
        エラー時に出力するテンプレートを設定します。

    check
        チェック定義を追加します。

          $self->valid->check( 'name' => ['NOT_NULL']

    set_function
        入力チェック関数を定義します。

          # 入力値が FOO でなかったらエラーになる定義
          $self->valid->set_function(
              FOO => sub { return ($_[0] eq "FOO")? 1 : 0} 
          );

    load_function
        ファイルから、入力チェック関数を読み込みます。
        入力チェック関数の作り方は Sledge::Plugin::Validator::default
        を参考に してください。

    set_error
        自分で入力チェックなどしたときに、エラーをセットします。

          $self->valid->set_error('DB', 'login_id');

    set_alias
        エラーの別名を定義します。 以下のコードを書くと zip1 や zip2
        でエラーになったとき is_error メソッドで zip もエラーになります。

          $self->valid->set_alias(
              zip  => [qw(zip1 zip2)]
          );

    is_error
        エラーかどうかの真偽値が返ります。
        普段はテンプレート内でしか使用しません。

          [% IF valid.is_error %]
             全体で一つでもエラーがあれば真
          [% END %] 

          [% IF valid.is_error('name') %]
             name が 一つでもエラーになっていれば真
          [% END %] 

          [% IF valid.is_error('name', 'NOT_NULL') %]
             name かつ NOT_NULL がエラーになっていれば真
          [% END %] 

    is_FUNCTION
        一度読み込みされていれば(check で定義したり、load_function,
        load_function で設定されていれば) is_FUNCTON
        で入力定義を呼び出すことができます。

          if ($self->valid->is_INT($baz)) {
              $self->valid->set_error('INT', 'baz');
          }

        この仕組みは、実験的に導入されています。

TODO
    エラーメッセージの自動生成
        エラーメッセージを生成するのがめんどくさいので、ある程度は自動的に
        生成されるようにしたい。

        どうするのが、便利かつ綺麗かなぁ？アイディア募集中。

BUGS
    何かバグや要望がありましたら、BTSに書きこむかメールで
    お問い合わせください。

    <http://www.godtomato.net/works/bts/>

AUTHOR
    KIMURA, takefumi <takefumi@takefumi.com>

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

SEE ALSO
    Sledge::Plugin::Validator::date, Sledge::Plugin::Validator::default,
    Sledge::Plugin::Validator::email,
    Sledge::Plugin::Validator::email_loose,
    Sledge::Plugin::Validator::email_strict,
    Sledge::Plugin::Validator::japanese

